// lib/src/features/mail/presentation/widgets/mobile/mail_detail_actions/mail_detail_actions_models.dart

/// Mail Detail Actions Model SÄ±nÄ±flarÄ±
///
/// Bu dosya mail detail sayfasÄ±nda kullanÄ±lan action butonlarÄ± ve menÃ¼ Ã¶ÄŸeleri
/// iÃ§in model sÄ±nÄ±flarÄ±nÄ± iÃ§erir. Yandex Mail benzeri UI iÃ§in tasarlanmÄ±ÅŸtÄ±r.
///
/// SorumluluklarÄ±:
/// - Action type enums tanÄ±mlamak
/// - Action item model sÄ±nÄ±flarÄ± saÄŸlamak
/// - Constant action listeleri sunmak
/// - UI metadata yÃ¶netmek
library;

import 'package:flutter/material.dart';

/// Mail Ã¼zerinde yapÄ±labilecek aksiyonlarÄ±n enum listesi
///
/// Bottom bar ve action sheet'te kullanÄ±lacak tÃ¼m aksiyonlarÄ± iÃ§erir.
/// Her action'Ä±n kendine ait icon, title ve davranÄ±ÅŸÄ± vardÄ±r.
enum MailAction {
  // Ana bottom bar aksiyonlarÄ±
  reply, // YanÄ±tla
  forward, // Ä°let
  markImportant, // Ã–nemli olarak iÅŸaretle (eski archive yerine)
  delete, // Sil
  // Action sheet (Ã¼Ã§ nokta menÃ¼) aksiyonlarÄ±
  markRead, // Okundu/OkunmadÄ± olarak iÅŸaretle
  markUnread, // OkunmadÄ± olarak iÅŸaretle (ayrÄ± enum deÄŸer)
  addLabel, // KlasÃ¶re taÅŸÄ± / Etiket ekle
  archive, // ArÅŸivle (action sheet'e taÅŸÄ±ndÄ±)
  spam, // Spam olarak iÅŸaretle
  permanent, // Sabitle
  createRule, // Kural oluÅŸtur
  translate, // Ã‡evirmeni gÃ¶ster
  print, // YazdÄ±r
  moreOptions, // Daha fazla seÃ§enek (nested menu iÃ§in)
}

/// Action item model sÄ±nÄ±fÄ±
///
/// Her action item'Ä± iÃ§in UI metadata'sÄ±nÄ± tutar.
/// ListTile, IconButton ve diÄŸer UI componentleri tarafÄ±ndan kullanÄ±lÄ±r.
class MailActionItem {
  /// Action type - hangi aksiyonun yapÄ±lacaÄŸÄ±nÄ± belirler
  final MailAction action;

  /// Action icon - Material Icons
  final IconData icon;

  /// Action title - kullanÄ±cÄ±ya gÃ¶sterilecek ana metin
  final String title;

  /// Action subtitle - opsiyonel aÃ§Ä±klama metni
  final String? subtitle;

  /// Action aktif mi - false ise disabled gÃ¶sterilir
  final bool enabled;

  /// Action destructive mi - kÄ±rmÄ±zÄ± renk kullanÄ±lÄ±r (delete, spam vb.)
  final bool isDestructive;

  /// Action color override - Ã¶zel renk kullanÄ±mÄ± iÃ§in
  final Color? color;

  const MailActionItem({
    required this.action,
    required this.icon,
    required this.title,
    this.subtitle,
    this.enabled = true,
    this.isDestructive = false,
    this.color,
  });

  /// Copy with method - immutable updates iÃ§in
  MailActionItem copyWith({
    MailAction? action,
    IconData? icon,
    String? title,
    String? subtitle,
    bool? enabled,
    bool? isDestructive,
    Color? color,
  }) {
    return MailActionItem(
      action: action ?? this.action,
      icon: icon ?? this.icon,
      title: title ?? this.title,
      subtitle: subtitle ?? this.subtitle,
      enabled: enabled ?? this.enabled,
      isDestructive: isDestructive ?? this.isDestructive,
      color: color ?? this.color,
    );
  }

  /// Debugging iÃ§in string representation
  @override
  String toString() {
    return 'MailActionItem(action: $action, title: $title, enabled: $enabled)';
  }
}

/// Bottom bar actions - ana 4 buton
///
/// Yandex Mail benzeri bottom bar iÃ§in constant action listesi.
/// Her action'Ä±n icon ve title bilgisi bulunur.
class BottomBarActions {
  static const List<MailActionItem> primaryActions = [
    MailActionItem(
      action: MailAction.reply,
      icon: Icons.reply,
      title: 'YanÄ±tla',
      subtitle: 'Bu maile yanÄ±t yaz',
    ),
    MailActionItem(
      action: MailAction.forward,
      icon: Icons.forward,
      title: 'Ä°let',
      subtitle: 'Bu maili baÅŸkasÄ±na ilet',
    ),
    MailActionItem(
      action: MailAction.markImportant,
      icon: Icons.label_important,
      title: 'Ã–nemli',
      subtitle: 'Ã–nemli olarak iÅŸaretle',
    ),
    MailActionItem(
      action: MailAction.delete,
      icon: Icons.delete,
      title: 'Sil',
      subtitle: 'Ã‡Ã¶p kutusuna taÅŸÄ±',
      isDestructive: true,
    ),
  ];

  /// More actions butonu iÃ§in
  static const MailActionItem moreActionsButton = MailActionItem(
    action: MailAction.moreOptions,
    icon: Icons.more_horiz, // ğŸ”„ Yatay Ã¼Ã§ nokta
    title: 'Daha fazla',
    subtitle: 'Ek seÃ§enekler',
  );
}

/// Action sheet actions - Ã¼Ã§ nokta menÃ¼ Ã¶ÄŸeleri
///
/// Action sheet'te gÃ¶sterilecek tÃ¼m aksiyonlarÄ±n listesi.
/// Kategorilere ayrÄ±lmÄ±ÅŸ olarak dÃ¼zenlenmiÅŸtir.
class ActionSheetActions {
  /// SÄ±k kullanÄ±lan aksiyonlar - Ã¼stte gÃ¶sterilir
  static const List<MailActionItem> frequentActions = [
    MailActionItem(
      action: MailAction.markRead,
      icon: Icons.mark_email_read,
      title: 'Okundu olarak iÅŸaretle',
      subtitle: 'Bu maili okundu duruma getir',
    ),
    MailActionItem(
      action: MailAction.markUnread,
      icon: Icons.mark_email_unread,
      title: 'OkunmadÄ± olarak iÅŸaretle',
      subtitle: 'Bu maili okunmadÄ± duruma getir',
    ),
    MailActionItem(
      action: MailAction.addLabel,
      icon: Icons.folder,
      title: 'KlasÃ¶re taÅŸÄ±',
      subtitle: 'FarklÄ± klasÃ¶re taÅŸÄ± veya etiket ekle',
    ),
  ];

  /// DiÄŸer aksiyonlar - altta gÃ¶sterilir
  static const List<MailActionItem> otherActions = [
    MailActionItem(
      action: MailAction.archive,
      icon: Icons.archive,
      title: 'ArÅŸivle',
      subtitle: 'ArÅŸiv klasÃ¶rÃ¼ne taÅŸÄ±',
    ),
    MailActionItem(
      action: MailAction.spam,
      icon: Icons.report,
      title: 'Spam',
      subtitle: 'Spam olarak iÅŸaretle',
      isDestructive: true,
      color: Colors.orange,
    ),
    MailActionItem(
      action: MailAction.permanent,
      icon: Icons.push_pin,
      title: 'Sabitle',
      subtitle: 'Bu maili listede sabitle',
    ),
    MailActionItem(
      action: MailAction.createRule,
      icon: Icons.rule,
      title: 'Kural oluÅŸtur',
      subtitle: 'Bu tip mailler iÃ§in otomatik kural oluÅŸtur',
    ),
    MailActionItem(
      action: MailAction.translate,
      icon: Icons.translate,
      title: 'Ã‡evirmeni gÃ¶ster',
      subtitle: 'Mail iÃ§eriÄŸini Ã§evir',
    ),
    MailActionItem(
      action: MailAction.print,
      icon: Icons.print,
      title: 'YazdÄ±r',
      subtitle: 'Bu maili yazdÄ±r',
    ),
  ];

  /// TÃ¼m action sheet aksiyonlarÄ± - birleÅŸtirilmiÅŸ liste
  static List<MailActionItem> get allActions => [
    ...frequentActions,
    ...otherActions,
  ];
}

/// Action result model - action tamamlandÄ±ÄŸÄ±nda dÃ¶nen sonuÃ§
///
/// Action handler'larÄ±n sonuÃ§ bilgisini taÅŸÄ±r.
/// Success/failure durumlarÄ± ve mesajlarÄ± iÃ§erir.
class MailActionResult {
  /// Action baÅŸarÄ±lÄ± mÄ±
  final bool success;

  /// SonuÃ§ mesajÄ± - kullanÄ±cÄ±ya gÃ¶sterilecek
  final String message;

  /// Hata durumunda hata detayÄ±
  final String? error;

  /// Action sonrasÄ± UI gÃ¼ncellemesi gerekli mi
  final bool requiresRefresh;

  /// Action sonrasÄ± navigasyon gerekli mi (Ã¶r: delete sonrasÄ± geri dÃ¶n)
  final bool requiresNavigation;

  const MailActionResult({
    required this.success,
    required this.message,
    this.error,
    this.requiresRefresh = false,
    this.requiresNavigation = false,
  });

  /// Success result factory
  factory MailActionResult.success({
    required String message,
    bool requiresRefresh = false,
    bool requiresNavigation = false,
  }) {
    return MailActionResult(
      success: true,
      message: message,
      requiresRefresh: requiresRefresh,
      requiresNavigation: requiresNavigation,
    );
  }

  /// Failure result factory
  factory MailActionResult.failure({required String message, String? error}) {
    return MailActionResult(success: false, message: message, error: error);
  }

  @override
  String toString() {
    return 'MailActionResult(success: $success, message: $message)';
  }
}

/// Action context - action'Ä±n yapÄ±ldÄ±ÄŸÄ± baÄŸlam bilgisi
///
/// Action handler'lara geÃ§irilecek context bilgisini tutar.
/// Mail detayÄ±, kullanÄ±cÄ± bilgisi ve UI callback'leri iÃ§erir.
class MailActionContext {
  /// Aksiyon yapÄ±lacak mail detayÄ±
  final dynamic
  mailDetail; // MailDetail type - import conflict Ã¶nlemek iÃ§in dynamic

  /// Mevcut kullanÄ±cÄ±nÄ±n email adresi
  final String currentUserEmail;

  /// Parent widget context - navigation ve snackbar iÃ§in
  final BuildContext context;

  /// Action tamamlandÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lacak callback
  final Function(MailActionResult)? onActionCompleted;

  const MailActionContext({
    required this.mailDetail,
    required this.currentUserEmail,
    required this.context,
    this.onActionCompleted,
  });
}

/// Utility sÄ±nÄ±fÄ± - action helper methodlarÄ±
///
/// Action'larla ilgili yardÄ±mcÄ± methodlar ve validasyonlar.
class MailActionUtils {
  /// Action'Ä±n mail durumuna gÃ¶re enabled olup olmadÄ±ÄŸÄ±nÄ± kontrol eder
  static bool isActionEnabled(MailAction action, dynamic mailDetail) {
    // Ã–rnek validasyonlar
    switch (action) {
      case MailAction.markRead:
        return mailDetail?.isRead == false; // Sadece okunmamÄ±ÅŸ maillerde aktif
      case MailAction.markUnread:
        return mailDetail?.isRead == true; // Sadece okunmuÅŸ maillerde aktif
      case MailAction.archive:
        return mailDetail != null; // Mail varsa aktif
      case MailAction.delete:
        return mailDetail != null; // Mail varsa aktif
      default:
        return true; // DiÄŸerleri her zaman aktif
    }
  }

  /// Action iÃ§in uygun icon rengini dÃ¶ner
  static Color? getActionColor(
    MailActionItem actionItem,
    BuildContext context,
  ) {
    if (actionItem.color != null) {
      return actionItem.color;
    }

    if (actionItem.isDestructive) {
      return Theme.of(context).colorScheme.error;
    }

    if (!actionItem.enabled) {
      return Theme.of(context).disabledColor;
    }

    return Theme.of(context).colorScheme.primary;
  }

  /// Action title'Ä± mail durumuna gÃ¶re gÃ¼ncellenmiÅŸ haliyle dÃ¶ner
  static String getContextualTitle(
    MailActionItem actionItem,
    dynamic mailDetail,
  ) {
    switch (actionItem.action) {
      case MailAction.markRead:
        return mailDetail?.isRead == true
            ? 'OkunmadÄ± olarak iÅŸaretle'
            : 'Okundu olarak iÅŸaretle';
      case MailAction.markUnread:
        return mailDetail?.isRead == false
            ? 'Okundu olarak iÅŸaretle'
            : 'OkunmadÄ± olarak iÅŸaretle';
      default:
        return actionItem.title;
    }
  }
}
